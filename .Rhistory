"Stress", "AlcoholUse", "AllNighter")
SleepStudy %<>% mutate_at(facvars, factor)
library(magrittr)
library(dplyr)
SleepStudy %<>% mutate_at(facvars, factor)
SleepStudy
fit <- lm(GPA ~ ClassYear + AlcoholUse)
SleepStudy$
fit <- lm(GPA ~ ClassYear + AlcoholUse, data = SleepStudy)
fit <- lm(GPA ~ ClassYear + AlcoholUse, data = SleepStudy)
summary(fit)
fit <- lm(GPA ~ ClassYear + AlcoholUse + ClassYear:AlcoholUse, data = SleepStudy)
summary(fit)
library(readxl)
dat <- read_xlsx("/Users/taehoonh/Downloads/template_intact_translation 1-10.xlsx")
dat
dat <- read_xlsx("/Users/taehoonh/Downloads/template_intact_translation 1-10.xlsx", sheet = 2)
dat
480/12
rep(rep(c("a", "p", "s", "i"), c(3, 3, 3, 3)), 40)
dat$translation <- rep(rep(c("a", "p", "s", "i"), c(3, 3, 3, 3)), 40)
dat
dat$translation <- factor(dat$translation, levels = c("a", "p", "s", "i"), labels = c("anterior", "posteiror", "superior", "inferior"))
dat
library(Lock5Data)
library(magrittr)
library(dplyr)
library(readxl)
dat <- read_xlsx("/Users/taehoonh/Downloads/template_intact_translation 1-10.xlsx", sheet = 2)
dat$translation <- rep(rep(c("a", "p", "s", "i"), c(3, 3, 3, 3)), 40)
dat$translation <- factor(dat$translation, levels = c("a", "p", "s", "i"), labels = c("anterior", "posterior", "superior", "inferior"))
dat$deg
dat
dat$deg <- factor(dat$deg, levels = c(0, 10))
dat$deg
dat
library(Lock5Data)
library(magrittr)
library(dplyr)
library(readxl)
dat <- read_xlsx("/Users/taehoonh/Downloads/template_intact_translation 1-10.xlsx", sheet = 2)
dat$translation <- rep(rep(c("a", "p", "s", "i"), c(3, 3, 3, 3)), 40)
dat$translation <- factor(dat$translation, levels = c("a", "p", "s", "i"), labels = c("anterior", "posterior", "superior", "inferior"))
dat$deg <- factor(dat$deg, levels = c(0, 10))
dat$comp <- factor(dat$comp, levels = c(5, 10))
dat$load <- factor(dat$load, levels = c(2.5, 5.0, 7.5))
dat
dat
fit <- lm(dependent_v1 ~ translation, data = dat)
fit2 <- lm(dependent_v1 ~ deg, data = dat)
fit3 <- lm(dependent_v1 ~ comp, data = dat)
fit4 <- lm(dependent_v1 ~ load, data = dat)
summary(fit)
summary(fit2)
plot(fit)
dat
plot(fit)
fit <- lm(log(dependent_v1) ~ translation, data = dat)
plot(fit)
fit <- lm(log(dependent_v1+0.00001) ~ translation, data = dat)
plot(fit)
plot(fit)
summary(fit)
hist(dat$dependent_v1, breaks = "FD")
hist(log(dependent_v1+0.00001), breaks = "FD")
hist(log(dat$dependent_v1+0.00001), breaks = "FD")
summary(fit)
log(dat$dependent_v1+0.00001)
log(dat$dependent_v1)
log(abs(dat$dependent_v1))
fit <- lm(abs(dependent_v1) ~ translation, data = dat)
plot(fit)
fit <- lm(log(abs(dependent_v1)) ~ translation, data = dat)
plot(fit)
fit <- lm(sqrt(abs(dependent_v1)) ~ translation, data = dat)
plot(fit)
fit <- lm(log(abs(dependent_v1), base = 10) ~ translation, data = dat)
plot(fit)
fit <- lm(log(abs(dependent_v1), base = exp(1)) ~ translation, data = dat)
plot(fit)
fit <- lm(abs(dependent_v1), base = exp(1)) ~ translation, data = dat)
fit <- lm(abs(dependent_v1)~ translation, data = dat)
plot(fit)
fit <- lm(log(abs(dependent_v1)~ translation, data = dat)
plot(fit)
plot(fit)
fit <- lm(log(abs(dependent_v1)~ translation, data = dat)
fit <- lm(log(abs(dependent_v1) ~ translation, data = dat)
fit <- lm(log(abs(dependent_v1) ~ translation, data = dat)
fit <- lm(log(abs(dependent_v1)) ~ translation, data = dat)
fit <- lm(log(abs(dependent_v1)) ~ translation, data = dat)
plot(fit)
dat$dependent_v1 - fit$fitted.values
hist(dat$dependent_v1 - fit$fitted.values)
hist(dat$dependent_v1 - fit$fitted.values, breaks = "FD")
plot(fit)
fit2 <- lm(dependent_v1 ~ deg, data = dat)
plot(fit2)
dat$dependent_v1_abs <- abs(dat$dependent_v1)
dat
dat$dependent_v1_abs <- abs(dat$dependent_v1)
library(Lock5Data)
library(magrittr)
library(dplyr)
library(readxl)
dat <- read_xlsx("/Users/taehoonh/Downloads/template_intact_translation 1-10.xlsx", sheet = 2)
dat$translation <- rep(rep(c("a", "p", "s", "i"), c(3, 3, 3, 3)), 40)
dat$translation <- factor(dat$translation, levels = c("a", "p", "s", "i"), labels = c("anterior", "posterior", "superior", "inferior"))
dat$deg <- factor(dat$deg, levels = c(0, 10))
dat$comp <- factor(dat$comp, levels = c(5, 10))
dat$load <- factor(dat$load, levels = c(2.5, 5.0, 7.5))
dat$dependent_v1_abs <- abs(dat$dependent_v1)
fit <- lm(log(dependent_v1_abs) ~ translation, data = dat)
fit2 <- lm(dependent_v1_abs ~ deg, data = dat)
plot(fit2)
fit2 <- lm(log(dependent_v1_abs) ~ deg, data = dat)
plot(fit2)
summary(fit2)
dat <- read_xlsx("/Users/taehoonh/Downloads/template_intact_translation 1-10.xlsx", sheet = 2)
dat$translation <- rep(rep(c("a", "p", "s", "i"), c(3, 3, 3, 3)), 40)
dat$translation <- factor(dat$translation, levels = c("a", "p", "s", "i"), labels = c("anterior", "posterior", "superior", "inferior"))
dat$deg <- factor(dat$deg, levels = c(0, 10))
dat$comp <- factor(dat$comp, levels = c(5, 10))
dat$load <- factor(dat$load, levels = c(2.5, 5.0, 7.5))
dat$abs_dependent_v1 <- abs(dat$dependent_v1)
library(Lock5Data)
library(magrittr)
library(dplyr)
library(readxl)
dat <- read_xlsx("/Users/taehoonh/Downloads/template_intact_translation 1-10.xlsx", sheet = 2)
dat$translation <- rep(rep(c("a", "p", "s", "i"), c(3, 3, 3, 3)), 40)
dat$translation <- factor(dat$translation, levels = c("a", "p", "s", "i"), labels = c("anterior", "posterior", "superior", "inferior"))
dat$deg <- factor(dat$deg, levels = c(0, 10))
dat$comp <- factor(dat$comp, levels = c(5, 10))
dat$load <- factor(dat$load, levels = c(2.5, 5.0, 7.5))
dat$abs_dependent_v1 <- abs(dat$dependent_v1)
dat$log_dependent_v1_abs <- log(abs(dat$dependent_v1))
fit <- lm(log_abs_dependent_v1) ~ translation, data = dat)
fit <- lm(log_abs_dependent_v1 ~ translation, data = dat)
library(Lock5Data)
library(magrittr)
library(dplyr)
library(readxl)
dat <- read_xlsx("/Users/taehoonh/Downloads/template_intact_translation 1-10.xlsx", sheet = 2)
dat$translation <- rep(rep(c("a", "p", "s", "i"), c(3, 3, 3, 3)), 40)
dat$translation <- factor(dat$translation, levels = c("a", "p", "s", "i"), labels = c("anterior", "posterior", "superior", "inferior"))
dat$deg <- factor(dat$deg, levels = c(0, 10))
dat$comp <- factor(dat$comp, levels = c(5, 10))
dat$load <- factor(dat$load, levels = c(2.5, 5.0, 7.5))
dat$abs_dependent_v1 <- abs(dat$dependent_v1)
dat$log_abs_dependent_v1 <- log(abs(dat$dependent_v1))
fit <- lm(log_abs_dependent_v1 ~ translation, data = dat)
final_model <- lm(log_abs_dependent_v1 ~ translation + deg, data = dat)
summary(final_model)
final_model <- lm(log_abs_dependent_v1 ~ translation + deg + translation:deg, data = dat)
summary(final_model)
final_model <- lm(log_abs_dependent_v1 ~ translation + deg, data = dat)
fit3 <- lm(log_abs_dependent_v1 ~ comp, data = dat)
plot(fit3)
summary(fit3)
fit4 <- lm(log_abs_dependent_v1 ~ load, data = dat)
plot(fit4)
summary(fit4)
final_model <- lm(log_abs_dependent_v1 ~ translation + deg + comp + load, data = dat)
summary(final_model)
final_model <- lm(log_abs_dependent_v1 ~ (translation + deg + comp + load)^2, data = dat)
summary(final_model)
final_model <- lm(log_abs_dependent_v1 ~ translation + deg + comp + load, data = dat)
summary(final_model)
final_model <- lm(log_abs_dependent_v1 ~ translation + deg + comp + load + translation:comp, data = dat)
summary(final_model)
final_model <- lm(log_abs_dependent_v1 ~ translation + deg + comp + load + translation:load, data = dat)
summary(final_model)
final_model <- lm(log_abs_dependent_v1 ~ translation + deg + comp + load + deg:comp, data = dat)
summary(final_model)
final_model <- lm(log_abs_dependent_v1 ~ translation + deg + comp + load + deg:load, data = dat)
summary(final_model)
final_model <- lm(log_abs_dependent_v1 ~ translation + deg + comp + load + comp:load, data = dat)
summary(final_model)
final_model <- lm(log_abs_dependent_v1 ~ translation + deg + comp + load, data = dat)
summary(final_model)
fit <- lm(log_abs_dependent_v1 ~ translation, data = dat)
fit2 <- lm(log_abs_dependent_v1 ~ deg, data = dat)
fit3 <- lm(log_abs_dependent_v1 ~ comp, data = dat)
fit4 <- lm(log_abs_dependent_v1 ~ load, data = dat)
final_model <- lm(log_abs_dependent_v1 ~ translation + deg + comp + load, data = dat)
summary(final_model)
dat
glmmPQL(log_abs_dependent_v1 ~ translation + deg + comp + load, random = ~1|specimen, data = dat)
library(MASS)
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ translation + deg + comp + load, random = ~1|specimen, data = dat)
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ translation + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.mix)
TukeyHSD(final_fit)
TukeyHSD(final_model)
final_aov <- aov(log_abs_dependent_v1 ~ translation + deg + comp + load, data = dat)
TukeyHSD(final_model)
TukeyHSD(final_model ,"translation")
TukeyHSD(final_aov,"translation")
TukeyHSD(final_aov,"deg")
dat
summary(fit.mix)
summary(fit.mix)
dat.anteriror <- dat %>%
filter(translation == "anterior")
# translation = anterior, comp = 5, load = 2.5
dat.anteriror <- dat %>%
filter(translation == "anterior" & comp = "5", load = "2.5")
# translation = anterior, comp = 5, load = 2.5
dat.anteriror <- dat %>%
filter(translation == "anterior" & comp = "5" & load = "2.5")
# translation = anterior, comp = 5, load = 2.5
dat.temp <- dat %>%
filter(translation == "anterior" & comp == "5" & load == "2.5")
dat.temp
fit.temp <- glmmPQL(log_abs_dependent_v1 ~ deg, random = ~1|specimen, family = "gaussian", data = dat)()
fit.temp <- glmmPQL(log_abs_dependent_v1 ~ deg, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.temp)
plot(fit.temp)
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ -1 translation + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.mix)
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ translation + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.mix)
fit.mix <- glmmPQL(dependent_v1 ~ translation + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.mix)
fit.mix <- glmmPQL(abs_dependent_v1 ~ translation + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.mix)
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ translation + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.mix)
dat.temp
t.test(dat$log_abs_dependent_v1[dat$deg == "0"], dat$log_abs_dependent_v1[dat$deg == "10"])
t.test(dat$log_abs_dependent_v1[dat$deg == "0"], dat$log_abs_dependent_v1[dat$deg == "10"])
dat <- read_xlsx("/Users/taehoonh/Downloads/template_intact_translation 1-10 (1).xlsx")
dat
dat <- read_xlsx("/Users/taehoonh/Downloads/template_intact_translation 1-10 (1).xlsx")
dat
dat <- read_xlsx("/Users/taehoonh/Downloads/template_intact_translation 1-10 (1).xlsx")
dat$condition <- factor(dat$condition, levels = c("intact", "sp"))
dat$translation <- factor(dat$translation, levels = c("a", "p", "s", "i"), labels = c("anterior", "posterior", "superior", "inferior"))
dat$deg <- factor(dat$deg, levels = c(0, 10))
dat$comp <- factor(dat$comp, levels = c(5, 10))
dat$load <- factor(dat$load, levels = c(2.5, 5.0, 7.5))
dat$abs_dependent_v1 <- abs(dat$dependent_v1)
dat$log_abs_dependent_v1 <- log(abs(dat$dependent_v1))
dat
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ condition + translation + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.mix)
summary(fit)
fit <- lm(log_abs_dependent_v1 ~ condition:translation, data = dat)
summary(fit)
chisq.test(dat$condition, dat$translation)
fihser.test(dat$condition, dat$translation)
fisher.test(dat$condition, dat$translation)
fit <- lm(log_abs_dependent_v1 ~ condition:translation, data = dat)
summary(fit)
plot(fit)
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ (condition + translation + deg + comp + load)^2, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.mix)
summary(fit.mix)
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ condition + translation + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.mix)
t.test(dat$log_abs_dependent_v1[dat$condition == "intact"], dat$log_abs_dependent_v1[dat$condition == "sp"])
hist(dat$log_abs_dependent_v1[dat$condition == "intact"], breaks = "FD")
hist(dat$log_abs_dependent_v1[dat$condition == "sp"], breaks = "FD")
hist(dat$log_abs_dependent_v1, breaks = "FD")
wilcox.test(dat$log_abs_dependent_v1[dat$condition == "intact"], dat$log_abs_dependent_v1[dat$condition == "sp"])
t.test(dat$log_abs_dependent_v1[dat$condition == "intact"], dat$log_abs_dependent_v1[dat$condition == "sp"])
summary(fit.mix)
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ condition + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.mix)
dat.anterior <- dat %>%
filter(translation == "anterior")
dat.ant <- dat %>%
filter(translation == "anterior")
dat.post <- dat %>%
filter(translation == "poterior")
dat.sup <- dat %>%
filter(translation == "superior")
dat.inf <- dat %>%
filter(translation == "inferior")
fit.ant <- glmmPQL(log_abs_dependent_v1 ~ condition + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat.ant)
fit.post <- glmmPQL(log_abs_dependent_v1 ~ condition + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat.post)
fit.sup <- glmmPQL(log_abs_dependent_v1 ~ condition + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat.sup)
fit.ant <- glmmPQL(log_abs_dependent_v1 ~ condition + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat.ant)
fit.post <- glmmPQL(log_abs_dependent_v1 ~ condition + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat.post)
fit.ant <- glmmPQL(log_abs_dependent_v1 ~ deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat.ant)
fit.post <- glmmPQL(log_abs_dependent_v1 ~ deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat.post)
fit.sup <- glmmPQL(log_abs_dependent_v1 ~ deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat.sup)
fit.inf <- glmmPQL(log_abs_dependent_v1 ~ deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat.inf)
dat.post
dat.post <- dat %>%
filter(translation == "posterior")
fit.ant <- glmmPQL(log_abs_dependent_v1 ~ deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat.ant)
fit.post <- glmmPQL(log_abs_dependent_v1 ~ deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat.post)
fit.sup <- glmmPQL(log_abs_dependent_v1 ~ deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat.sup)
fit.inf <- glmmPQL(log_abs_dependent_v1 ~ deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat.inf)
summary(fit.ant)
summary(fit.post)
summary(fit.sup)
summary(fit.inf)
summary(fit.ant)
summary(fit.post)
summary(fit.sup)
summary(fit.inf)
summary(fit.ant)
fit.ant <- glmmPQL(log_abs_dependent_v1 ~ condition, random = ~1|specimen, family = "gaussian", data = dat.ant)
fit.post <- glmmPQL(log_abs_dependent_v1 ~ condition, random = ~1|specimen, family = "gaussian", data = dat.post)
fit.sup <- glmmPQL(log_abs_dependent_v1 ~ condition, random = ~1|specimen, family = "gaussian", data = dat.sup)
fit.inf <- glmmPQL(log_abs_dependent_v1 ~ condition, random = ~1|specimen, family = "gaussian", data = dat.inf)
summary(fit.ant)
summary(fit.post)
summary(fit.sup)
summary(fit.inf)
plot(fit.ant)
summary(fit.ant)
summary(fit.post)
summary(fit.sup)
summary(fit.inf)
summary(fit.ant)
summary(fit.post)
summary(fit.sup)
summary(fit.inf)
dat$condition <- factor(dat$condition, levels = c("intact", "sp"))
dat$translation <- factor(dat$translation, levels = c("a", "p", "s", "i"), labels = c("anterior", "posterior", "superior", "inferior"))
dat$deg <- factor(dat$deg, levels = c(0, 10))
dat$comp <- factor(dat$comp, levels = c(5, 10))
dat$load <- factor(dat$load, levels = c(2.5, 5.0, 7.5))
dat$abs_dependent_v1 <- abs(dat$dependent_v1)
dat$log_abs_dependent_v1 <- log(abs(dat$dependent_v1))
library(MASS)
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ translation + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ condition + translation + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
dat
dat <- read_xlsx("/Users/taehoonh/Downloads/template_intact_translation 1-10.xlsx")
dat$condition <- factor(dat$condition, levels = c("intact", "sp"))
dat$translation <- factor(dat$translation, levels = c("a", "p", "s", "i"), labels = c("anterior", "posterior", "superior", "inferior"))
dat$deg <- factor(dat$deg, levels = c(0, 10))
dat$comp <- factor(dat$comp, levels = c(5, 10))
dat$load <- factor(dat$load, levels = c(2.5, 5.0, 7.5))
dat$abs_dependent_v1 <- abs(dat$dependent_v1)
dat$log_abs_dependent_v1 <- log(abs(dat$dependent_v1))
library(MASS)
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ condition + translation + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.mix)
plot(fit.mix)
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ translation + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.mix)
plot(fit.mix)
hist(fit.mix$residuals)
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ condition + translation + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.mix)
hist(fit.mix$residuals)
library(robustbase)
dat
fit.rob <- lmrob(log_abs_dependent_v1 ~ condition + translation + deg + comp + load, data = dat, setting = "KS2014")
summary(fit.rob)
# final model using linear mixed effects model
library(MASS)
fit.mix <- glmmPQL(log_abs_dependent_v1 ~ condition + translation + deg + comp + load, random = ~1|specimen, family = "gaussian", data = dat)
summary(fit.mix)
write.csv("/Users/taehoonh/Downloads/template_intact_translation 1-10_THedit.xlsx")
write.csv(dat, "/Users/taehoonh/Downloads/template_intact_translation 1-10_THedit.xlsx")
write.csv(dat, "/Users/taehoonh/Downloads/template_intact_translation 1-10_THedit.csv")
knitr::opts_chunk$set(echo = TRUE)
a <- c(1:10)
b <- c(11:20)
a <- c(1:10, 100)
b <- c(11:20)
t.test(a, b)
a <- c(1:10, 100)
b <- c(11:20, 21)
t.test(a, b)
a <- c(1:10, 10000000)
b <- c(11:20, 21)
t.test(a, b)
a
a <- c(1:10, 1000000)
a
a <- c(1:10, 100000)
a
a <- c(1:10, 10000)
a
b <- c(11:20, 21)
b
t.test(a, b)
a <- c(1:10)
a
b <- c(11:20, 21)
b
t.test(a, b)
a <- c(1:10, 15)
a
b <- c(11:20, 21)
b
t.test(a, b)
a <- c(1:10)
a
b <- c(11:20, 21)
b
t.test(a, b)
a <- c(1:10, 15)
a
b <- c(11:20, 21)
b
t.test(a, b)
t.test(a, b, var.equal = F)
hist(a, breaks = "FD")
a <- qnorm(50, mean = 15, sd = 2)
hist(a, breaks = "FD")
a <- rnorm(50, mean = 15, sd = 2)
b <- c(11:20, 21)
t.test(a, b, var.equal = F)
hist(a, breaks = "FD")
a <- rnorm(100, mean = 15, sd = 2)
hist(a, breaks = "FD")
a <- rnorm(10, mean = 15, sd = 2)
hist(a, breaks = "FD")
a <- rnorm(30, mean = 15, sd = 2)
hist(a, breaks = "FD")
qqnorm(a)
qqline(a, col = 2)
a <- rnorm(10, mean = 15, sd = 2)
hist(a, breaks = "FD")
hist(a, breaks = "FD")
qqnorm(a)
qqline(a, col = 2)
hist(a, breaks = "FD")
qqnorm(a)
qqline(a, col = 2)
a <- rnorm(30, mean = 15, sd = 2)
hist(a, breaks = "FD")
qqnorm(a)
qqline(a, col = 2)
hist(a, breaks = "FD")
qqnorm(a)
qqline(a, col = 2)
a <- rnorm(30, mean = 15, sd = 10)
hist(a, breaks = "FD")
qqnorm(a)
qqline(a, col = 2)
rm(list=ls())
knitr::opts_chunk$set(echo = F, warning = F, message = F)
library(dplyr)
library(magrittr)
library(pzfx)
library(multcomp)
library(flextable)
library(reshape2)
library(BTKR)
library(tidyr)
fpval.txt <- function (pval) {
pval <- as.numeric(pval)
if (pval < 0.0001) {
pval.txt <- "P<0.0001"
} else if (pval < 0.001) {
pval.txt <- "P<0.001"
} else {
pval.txt <- paste("P=", round(pval, 2), sep = "")
}
return(pval.txt)
}
dat <- read_pzfx("./data/raw/202208/Fig. S4h_revision tumor weight (combined sgRNA).pzfx", strike_action = "keep", table = "Data 1") %>%
pivot_longer(`sgNEG_sgNEG#2`:sgETV6_sgNTRK1, names_to = "Group")
dat$Group <- factor(dat$Group, levels = c("sgNEG_sgETV6", "sgNEG_sgNEG#2", "sgETV6_sgSOX11", "sgETV6_sgNTRK1"))
dat <- read_pzfx("./data/raw/202208/Fig. S4h_revision tumor weight (combined sgRNA).pzfx", strike_action = "keep", table = "Data 1") %>%
pivot_longer(`sgNEG_sgNEG#2`:sgETV6_sgNTRK1, names_to = "Group")
dat$Group <- factor(dat$Group, levels = c("sgNEG_sgETV6", "sgNEG_sgNEG#2", "sgETV6_sgSOX11", "sgETV6_sgNTRK1"))
rm(list=ls())
knitr::opts_chunk$set(echo = F, warning = F, message = F)
library(dplyr)
library(magrittr)
library(pzfx)
library(multcomp)
library(flextable)
library(reshape2)
library(BTKR)
library(tidyr)
fpval.txt <- function (pval) {
pval <- as.numeric(pval)
if (pval < 0.0001) {
pval.txt <- "P<0.0001"
} else if (pval < 0.001) {
pval.txt <- "P<0.001"
} else {
pval.txt <- paste("P=", round(pval, 2), sep = "")
}
return(pval.txt)
}
dat <- read_pzfx("./data/raw/202208/Fig. S4h_revision tumor weight (combined sgRNA).pzfx", strike_action = "keep", table = "Data 1") %>%
pivot_longer(`sgNEG_sgNEG#2`:sgETV6_sgNTRK1, names_to = "Group")
dat$Group <- factor(dat$Group, levels = c("sgNEG_sgETV6", "sgNEG_sgNEG#2", "sgETV6_sgSOX11", "sgETV6_sgNTRK1"))
dat
qqnorm(dat$value)
qqline(dat$value, col = 2)
qqnorm(log(dat$value))
qqline(log(dat$value), col = 2)
hist(dat$value)
hist(log(dat$value))
hist(log(dat$value), breaks = "FD")
qqnorm(log(dat$value))
qqline(log(dat$value), col = 2)
dat$value
length(dat.value)
length(dat$value)
dat %>%
filter(is.na(value) = F)
dat %>%
filter(is.na(value) == F)
hist(log(dat$value), breaks = "FD")
mean(c(40,40,40,40, 100))
mean(c(25,25,25,25, 75, 75, 75, 75))
mean(c(40, 41, 42, 43, 100))
